Project Title:  Java Implementation of the converge-cast algorithm as a recursion.

Instructions to clone the repository from Git Bash:

$ git clone https://github.com/Mayuri-Wad-012447851/CS-249-Distributed-Computing
Cloning into 'CS-249-Distributed-Computing'...
remote: Counting objects: 36, done.
remote: Compressing objects: 100% (32/32), done.
remote: Total 36 (delta 4), reused 35 (delta 3), pack-reused 0
Unpacking objects: 100% (36/36), done.

Instructions to run the program from command prompt:

1. In command prompt, change directory to location of file (cloning location). 
2. To compile and run, issue following commands:

Command 1: 
$..\CS-249-Distributed-Computing\HW4-Convergecast\src>"C:\Program Files\Java\jdk1.8.0_121\bin\javac" *.java

Command 2:
$..\CS-249-Distributed-Computing\HW4-Convergecast\src>"C:\Program Files\Java\jdk1.8.0_121\bin\java" Main

Overview:
This is homework assignment for CS249 Distributed Computing course at SJSU, Fall 2017. 
Implementation has following classes:

Main.java
	In this module, a binary tree is populated with processor nodes, their left and right children. It also contains a main() method, which wakes the root up by sending <M> to its buffer. 

Processor.java
	This module implements Observer interface and thus provides implementation for update() method of observer. Update method decides processor's behavior after being notified by a change in observable buffer.
Initially I have set a value of variable max for each Processor instance as its own value. Whenever a message <M> is received by a Processor, it forwards <M> to its left or right children. Once all the nodes in a tree receive <M>, the leaf nodes will start sending PARENT message to parent nodes with max element information.

Message.java
It contains Message enum with values PARENT and M.

Buffer.java
Buffer is an observable of a processor and it notifies its processor instance of any change in its state.

Input:
A tree is given in which each node has an integer (> 0) value stored.
 

Output:

       2
      / \
     /   \
    /     \
   /       \
   7       5
  / \       \
 /   \       \
 2   6       9
    / \     /
    5 11     4


Node 2  Max element at me : 2

Node 5  Max element at me : 5

Node 11 Max element at me : 11

Node 6  Max element at me : 11

Node 7  Max element at me : 11

Node 4  Max element at me : 4

Node 9  Max element at me : 9

Node 5  Max element at me : 9

Node 2  Max element at me : 11

---------Max at Root Node:      11

---------Traversed path at Root Node:
(2) (5) (11) (6) (7) (4) (9) (5) (2)
