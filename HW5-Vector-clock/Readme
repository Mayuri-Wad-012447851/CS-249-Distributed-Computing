TBD...

Title: Design for Vector Clock Implementation

1- Interactions

2- What we need to store

4- What needs to change

5- What will be the input? [ The input will be different each time, user should have the ability to control input  and get different results ] 

6- What will be the output?

7- Decide which event happened Before, which event is concurrent.

Classes:

1. Processor
	Member variables and member function:
	
	-id 			: Integer		to uniquely identify processor
	-messageBuffer 	: Buffer		
	-vc				: VectorClock
	
	+sendMessgeToMyBuffer(Message message)
	+update(Observable observable, Object arg)
	+calculateVectorClocks(Observable observable, Object arg)
	
2. VectorClock
	Member variables and member function:
	
	-vc				: Integer[]		to store array of vector clocks
	
	+compareTo(VectorClock o)
	+updateAt(int index, int value)
	
3. Algorithm
	Member variables and member function:
	
	-noOfProcessors	: Integer
	-p				: Processor
	
	+executionPlanForP()
	+compute(Processor p, Message computeMessage)
	+send(Processor to, Message m)
	
4. MessageType <<enumeration>>
	
	COMPUTATION

5. Message

	-messageType	: MessageType
	-vc				: VectorClock

6. Buffer

	-message		: Message
	
	+getMessage()
	+setMessage(Message message)	
	
	
	
